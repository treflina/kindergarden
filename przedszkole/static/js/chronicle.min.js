"use strict";function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(t,e){var r;if(t)return"string"==typeof t?_arrayLikeToArray(t,e):"Map"===(r="Object"===(r=Object.prototype.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:r)||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(t,e):void 0}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}document.addEventListener("DOMContentLoaded",function(t){function n(t){fetch("/?"+new URLSearchParams({page:t}),{method:"GET",headers:{"X-Requested-With":"XMLHttpRequest"}}).then(function(t){return t.text()}).then(function(t){for(;e.firstChild;)e.removeChild(e.firstChild);e.insertAdjacentHTML("afterbegin",t)}).catch(function(t){console.warn("Something went wrong.",t)})}var e=document.getElementById("chronicle"),a=document.getElementsByClassName("pagination__item-link"),o=1;n(o),_toConsumableArray(a).forEach(function(r){r.addEventListener("click",function(t){t.preventDefault();var e,t="".concat(r.href).split("=")[1];o=t?parseInt(t):1,n(o),e=o,_toConsumableArray(a).forEach(function(t){t.classList.remove("active"),t.classList.contains("pagination-link-".concat(e))&&t.classList.add("active")}),document.getElementById("chronicle").scrollIntoView({behavior:"smooth"})})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNocm9uaWNsZS5qcyJdLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInJlbW92ZSIsImNsYXNzTGlzdCIsImZldGNoIiwiVVJMU2VhcmNoUGFyYW1zIiwicGFnZSIsImhlYWRlcnMiLCJYLVJlcXVlc3RlZC1XaXRoIiwidGhlbiIsInJlc3BvbnNlIiwidGV4dCIsImNocm9uaWNsZVNlY3Rpb24iLCJyZW1vdmVDaGlsZCIsImZpcnN0Q2hpbGQiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJkYXRhIiwiY29uc29sZSIsIndhcm4iLCJlcnIiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJnZXRFbGVtZW50QnlJZCIsImJ0bkxpbmtzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImdldFBvc3RzIiwicHJldmVudERlZmF1bHQiLCJ0YXJnZXRVcmwiLCJidG4iLCJlIiwicCIsImNvbmNhdCIsImhyZWYiLCJzcGxpdCIsInBhcnNlSW50IiwiYmVoYXZpb3IiLCJmb3JFYWNoIiwiY29udGFpbnMiLCJzY3JvbGxJbnRvVmlldyJdLCJtYXBwaW5ncyI6InErQkFBQUEsU0FBU0MsaUJBQWlCLG1CQUFvQixTQUFVQyxHQU85QkMsU0FBVkMsRUFBVUQsR0FDZEUsTUFDUUQsS0FFVixJQUFBRSxnQkFBQSxDQUNMQyxLQUFBQSxDQUVhLENBQUcsRUFFVCxDQUdjQSxPQUFBQSxNQUVkQyxRQUFBLENBQ2lCQyxtQkFBQSxnQkFDSixDQUNMLENBQUEsRUFJRkMsS0FBQSxTQUFVQyxHQUNMQSxPQUFTQyxFQUFNQSxLQUFBLENBRXBCLENBQUEsRUFDS0MsS0FBQUEsU0FBQUEsR0FDSEEsS0FBQUEsRUFBNkJBLFlBQ2pDQSxFQUFBQyxZQUFBRCxFQUFBRSxVQUFBLEVBR0dGLEVBQWVHLG1CQUFBLGFBQUFDLENBQUEsQ0FDbEJDLENBQU8sRUFBQ0MsTUFDVixTQUFBQyxHQUNURixRQUFBQyxLQUFBLHdCQUFBQyxDQUFBLENBRVFiLENBQUFBLENBRVRjLENBM0NBLElBQU1SLEVBQW1CYixTQUFTc0IsZUFBZSxXQUFXLEVBQ3REQyxFQUFXdkIsU0FBU3dCLHVCQUF1Qix1QkFBdUIsRUFDcEVqQixFQUFPLEVBdUNYa0IsRUFJVUMsQ0FBQUEsRUFGVkwsbUJBS1FFLENBQUlJLEVBQUFBLFFBQVcsU0FBQUMsR0FDWHJCLEVBQUlOLGlCQUFZMEIsUUFBVSxTQUFBRSxHQUM3QkEsRUFBTUgsZUFBQSxFQUVQLElBaER5QkksRUFnRHpCSCxFQUFBLEdBQUFJLE9BQUFILEVBQUFJLElBQUEsRUFBQUMsTUFBQSxHQUFBLEVBQUEsR0FHQTFCLEVBRFNBLEVBQ1QyQixTQUFBUCxDQUFBLEVBSlcsRUFVV1EsRUFBVTVCLENBQUEsRUF6RFB1QixFQTREbkN2QixFQTNETWMsbUJBQUlFLENBQVEsRUFBRWEsUUFBUSxTQUFDUixHQUNuQkEsRUFBSXhCLFVBQVVELE9BQU8sUUFBUSxFQVBoQ0YsRUFBQUEsVUFBaUJvQyxTQUFBLG1CQUFBTixPQUE4QjdCLENBQUFBLENBQUFBLEdBQzlDVyxFQUFBQSxVQUFtQmIsSUFBU3NCLFFBQUFBLENBRTlCZixDQUFBQSxFQXlESVAsU0FDS3NCLGVBQWUsV0FBVyxFQUMxQmdCLGVBQWUsQ0FBRUgsU0FBVSxRQUFTLENBQUMsQ0FDOUMsQ0FBQyxDQUNMLENBQUMsQ0FDTCxDQUFDIiwiZmlsZSI6ImNocm9uaWNsZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIGNvbnN0IGNocm9uaWNsZVNlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNocm9uaWNsZVwiKTtcclxuICAgIGNvbnN0IGJ0bkxpbmtzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInBhZ2luYXRpb25fX2l0ZW0tbGlua1wiKTtcclxuICAgIGxldCBwYWdlID0gMTtcclxuXHJcbiAgICBjb25zdCByZW1vdmVBbmRTZXRBY3RpdmVDbGFzcyA9IChwKSA9PiB7XHJcbiAgICAgICAgWy4uLmJ0bkxpbmtzXS5mb3JFYWNoKChidG4pID0+IHtcclxuICAgICAgICAgICAgYnRuLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIGlmIChidG4uY2xhc3NMaXN0LmNvbnRhaW5zKGBwYWdpbmF0aW9uLWxpbmstJHtwfWApKSB7XHJcbiAgICAgICAgICAgICAgICBidG4uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBnZXRQb3N0cyA9IChwYWdlKSA9PiB7XHJcbiAgICAgICAgZmV0Y2goXHJcbiAgICAgICAgICAgIFwiL1wiICtcclxuICAgICAgICAgICAgICAgIFwiP1wiICtcclxuICAgICAgICAgICAgICAgIG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhZ2UsXHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiOiBcIlhNTEh0dHBSZXF1ZXN0XCIsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2hyb25pY2xlU2VjdGlvbi5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hyb25pY2xlU2VjdGlvbi5yZW1vdmVDaGlsZChjaHJvbmljbGVTZWN0aW9uLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2hyb25pY2xlU2VjdGlvbi5pbnNlcnRBZGphY2VudEhUTUwoXCJhZnRlcmJlZ2luXCIsIGRhdGEpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiU29tZXRoaW5nIHdlbnQgd3JvbmcuXCIsIGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBnZXRQb3N0cyhwYWdlKTtcclxuXHJcbiAgICBbLi4uYnRuTGlua3NdLmZvckVhY2goKGJ0bikgPT4ge1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gZ2V0UG9zdHNBZnRlckNsaWNrKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHRhcmdldFVybCA9IGAke2J0bi5ocmVmfWAuc3BsaXQoXCI9XCIpWzFdO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0VXJsKSB7XHJcbiAgICAgICAgICAgICAgICBwYWdlID0gcGFyc2VJbnQodGFyZ2V0VXJsKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhZ2UgPSAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRQb3N0cyhwYWdlKTtcclxuICAgICAgICAgICAgLy8gPCEtLSBsZXQgaGVpZ2h0ID0gY2hyb25pY2xlU2VjdGlvbi5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIC8vIGNocm9uaWNsZVNlY3Rpb24uc3R5bGUubWluSGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YDsgLS0+XHJcblxyXG4gICAgICAgICAgICByZW1vdmVBbmRTZXRBY3RpdmVDbGFzcyhwYWdlKTtcclxuICAgICAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNocm9uaWNsZVwiKVxyXG4gICAgICAgICAgICAgICAgLnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6IFwic21vb3RoXCIgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufSk7XHJcbiJdfQ==
